name: Deploy dev

on:
  push:
    branches: ["main"]

jobs:
  python_pytest_flake8:
    runs-on: ubuntu-latest
    strategy:
      # Ensure test pass as long as any Python version is successfully validated.
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "PYTHONPATH=hello_flask" >> $GITHUB_ENV

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: PyTest with Coverage Report
        run: python -m coverage run -m pytest
      - name: Print Coverage report
        run: python -m coverage report

  docker_build:
    runs-on: ubuntu-latest
    needs: python_pytest_flake8
    outputs:
      metatag: ${{ steps.meta.outputs.meta }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate short sha
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/flask
          tags: "${{ github.head_ref || github.ref_name }}${{ env.SHORT_SHA }}"

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  job3:
    runs-on: ubuntu-latest
    needs: docker_build
    steps:
      - run: echo ${{needs.docker_build.outputs.metatag }}

  integration_test:
    needs: job3
    runs-on: ubuntu-latest
    container: ubuntu
    services:
      amazing_web:
        image: ghcr.io/cahlingo/cicd_sandbox/flask:${{needs.docker_build.outputs.metatag }}
        credentials:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        ports:
          - 5000:5000
    steps:
      - run: apt-get update; apt-get install curl -y
      - run: curl amazing_web:5000 | grep 'Hello, World!'
      - run: echo ${{needs.docker_build.outputs.metatag }}
